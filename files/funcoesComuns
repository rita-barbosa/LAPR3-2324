create or replace FUNCTION obterIntroParcelas
    RETURN SYS_REFCURSOR AS
    listIntroParcelas SYS_REFCURSOR;
BEGIN
    OPEN listIntroParcelas FOR
        SELECT DISTINCT nomeParcela
        FROM parcela
        ORDER BY nomeParcela;
    RETURN listIntroParcelas;
END;
/
-------------------------------------------------------------------------------------------------------------------

create or replace FUNCTION obterListaUnidade
    RETURN SYS_REFCURSOR AS
    listaUnidades SYS_REFCURSOR;
BEGIN
    OPEN listaUnidades FOR
        SELECT designacaoUnidade
        FROM tipoUnidade
        ORDER BY designacaoUnidade;
    RETURN listaUnidades;
END;
/

-------------------------------------------------------------------------------------------------------------------

create or replace FUNCTION obterIntroCulturas
    RETURN SYS_REFCURSOR AS
    listIntroCulturas SYS_REFCURSOR;
BEGIN
    OPEN listIntroCulturas FOR
        SELECT DISTINCT (nomeComum || ' ' || variedade) AS nome
        FROM planta
        ORDER BY nome;
    RETURN listIntroCulturas;
END;
/

-------------------------------------------------------------------------------------------------------------------

create or replace FUNCTION novoIdOperacao
    RETURN NUMBER AS
    newIdOperation NUMBER;
BEGIN
    SELECT NVL(MAX(idOperacao), 0) + 1 INTO newIdOperation
    FROM operacao;
    RETURN newIdOperation;
END;
/

-------------------------------------------------------------------------------------------------------------------
create or replace FUNCTION mostrarOperacaoSemeadura
    RETURN SYS_REFCURSOR AS
    operacoes SYS_REFCURSOR;
BEGIN
    OPEN operacoes FOR
        SELECT DISTINCT op.idOperacao,
                        op.designacaooperacaoagricola,
                        op.designacaounidade,
                        op.quantidade,
                        op.dataoperacao,
                        cul.nomeParcela,
                        cul.nomeComum,
                        cul.variedade,
                        inst.datainicial,
                        inst.datafinal
        FROM operacao op
                 INNER JOIN operacaoCultura cul ON cul.idOperacao = op.idOperacao
                 INNER JOIN culturaInstalada inst ON cul.datainicial = inst.datainicial
        WHERE designacaoOperacaoAgricola = 'Semeadura'
        ORDER BY op.idOperacao;
    RETURN operacoes;
END;
/

-------------------------------------------------------------------------------------------------------------------

create or replace FUNCTION verificarSeOperacaoExiste(
    desigOp IN tipoOperacaoAgricola.designacaoOperacaoAgricola%TYPE,
    desigUnidade IN tipoUnidade.designacaoUnidade%TYPE,
    qtd IN NUMBER,
    dataOp IN DATE,
    nomeParcela IN parcela.nomeParcela%TYPE,
    nomeComum IN culturainstalada.nomeComum%TYPE,
    variedade IN culturainstalada.variedade%TYPE
) RETURN NUMBER IS
    found NUMBER := 0;
BEGIN
    BEGIN
        SELECT NVL(COUNT(*), 0) INTO found
        FROM OPERACAO op
                 INNER JOIN operacaoCultura cul ON op.idOperacao = cul.idOperacao
        WHERE op.designacaooperacaoagricola = desigOp
          AND op.dataoperacao = dataOp
          AND op.designacaounidade = desigUnidade
          AND op.quantidade = qtd
          AND cul.nomeComum = nomeComum
          AND cul.variedade = variedade
          AND cul.nomeParcela = nomeParcela;
    EXCEPTION
        WHEN OTHERS THEN
            found := 0;
    END;
    RETURN found;
END;
/
-------------------------------------------------------------------------------------------------------------------

create or replace FUNCTION obterDataInicial(
        p_idParcela IN NUMBER,
        p_idCultura IN NUMBER
    ) RETURN DATE
    IS
        v_dataInicial DATE;
    BEGIN
        SELECT dataInicial
        INTO v_dataInicial
        FROM CulturaInstalada
        WHERE idParcela = p_idParcela
        AND idCultura = p_idCultura;

        RETURN v_dataInicial;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN NULL;
    END;
/

-------------------------------------------------------------------------------------------------------------------
create or replace function getCulturesByField( p_nomeParcela in CulturaInstalada.nomeParcela%TYPE) return SYS_REFCURSOR
is
    cultures SYS_REFCURSOR;
begin
    BEGIN
        open cultures for
            Select distinct p.nomeComum, p.variedade
            from planta p
            inner join culturaInstalada ci on ci.nomeComum = p.nomeComum and ci.variedade = p.variedade
            where ci.nomeParcela = p_nomeParcela;
    exception
        when no_data_found then
            return null;
    end;
    return cultures;
end;
/
